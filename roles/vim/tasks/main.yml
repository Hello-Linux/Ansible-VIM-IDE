---
# tasks file for vim
- name: -基础依赖安装--
  yum:
    name: "{{ item }}"
    state: latest
  loop:
    - ctags
    - ncurses
    - gcc-c++
    - ncurses-devel
    - wget
    - readline-devel
    - bzip2
    - curl
    - libcurl
    - curl-devel
    - openssl
    - openssl-devel
    - centos-release-scl
    - 'zlib*'
    - libffi-devel
    - expat-devel
    - python3-devel
    - perl-ExtUtils-CBuilder
    - perl-ExtUtils-Embed
    - perl-ExtUtils-Install
    - perl-ExtUtils-MakeMaker
    - perl-ExtUtils-Manifest
    - perl-ExtUtils-ParseXS

- name: gcc环境检测
  shell: which gcc
  register: gcc_result
  ignore_errors: True

- name: 获取本地gcc版本
  shell: gcc --version|awk 'NR==1 {print $3}'|awk -F "." '{print $1}'
  register: gcc_version
  ignore_errors: true

- name: git环境检测
  shell: git
  register: git_result
  ignore_errors: True

- name: 获取本地Git版本
  shell: "git --version|awk '{print $3}'|cut -d '.' -f1"
  register: git_version
  ignore_errors: true

- name: 检测GCC环境
  block:
    - name: 解压新版gcc压缩包
      unarchive:
        src: https://mirrors.aliyun.com/gnu/gcc/gcc-8.5.0/gcc-8.5.0.tar.gz
        dest: /tmp
        remote_src: yes
        validate_certs: no

    - name: 安装/升级gcc8.5.0
      shell: "cd gcc-8.5.0 && ./contrib/download_prerequisites && ./configure --enable-languages=c,c++ --disable-multilib && make -j$(nproc) && make install && rm -rf /usr/lib64/libstdc++.so.6 && ln -s /usr/local/lib64/libstdc++.so.6.0.25 /usr/lib64/libstdc++.so.6"
      args:
        chdir: /tmp

    - name: 卸载旧版本gcc
      yum:
        name: gcc
        state: absent
      ignore_errors: true

  rescue:
    - name: Print when errors
      debug:
        msg: 'Install error with gcc!'
  when: gcc_version.stdout | int < 8 or gcc_result is failed

- name: 检测Git环境
  block:
    - name: 卸载旧版本git
      yum:
        name: git
        state: absent
      ignore_errors: true

    - name: 解压新版git压缩包
      unarchive:
        src: git-2.18.4.tar.gz
        dest: /tmp
        remote_src: no

    - name: 安装/升级Git2.18
      shell: "cd git-2.18.4 && make prefix=/usr/local/git all && make prefix=/usr/local/git install"
      args:
        chdir: /tmp

    - name: 设置git环境变量
      lineinfile:
        dest=/root/.bashrc
        line='export PATH=$PATH:/usr/local/git/bin'
        state=present
  rescue:
    - name: Print when errors
      debug:
        msg: 'Install error with git!'
  when: git_version.stdout | float < 2 or git_result is failed

- name: 重载系统变量
  shell: "source ~/.bashrc"

- name: 解压Cmake3.15
  unarchive:
    src: cmake-3.15.0.tar.gz
    dest: /tmp
    remote_src: no

- name: 安装Cmake
  shell: "cd cmake-3.15.0 && ./bootstrap && make -j$(nproc) && make install"
  args:
    chdir: /tmp
- name: 检查Python版本
  block:
    - name: 安装python3.8.15版本
      unarchive:
        src: Python-3.8.15.tgz
        dest: /tmp
        remote_src: no

    - name: 安装Python3.8.15
      shell: "cd Python-3.8.15  && ./configure --enable-shared && make -j$(nproc) && make install"
      args:
        chdir: /tmp

    - name: 更新Python 动态库
      lineinfile:
        path: /etc/ld.so.conf
        line: '/usr/local/lib/'
        create: yes
        state: present
  rescue:
    - name: Print when errors
      debug:
        msg: 'Install error with Python!'
  when: python_install == 'yes'

- name: 安装python语法库Jedi
  shell: "ldconfig;pip3.{{ python_version.split('.',2)[1] | default(8) }} install jedi pylint -i http://mirrors.aliyun.com/pypi/simple --trusted-host mirrors.aliyun.com"

- name: 解压lua5.3.6版本
  unarchive:
    src: lua-5.3.6.tar.gz
    dest: /tmp
    remote_src: no

- name: 安装lua5.3.6
  shell: "cd lua-5.3.6 && make linux test && make install"
  args:
    chdir: /tmp

- name: 获取本地vim版本
  shell: "vim --version|awk 'NR==1 {print $5}'"
  register: vim_version

- name: 准备vim环境
  unarchive:
    src: vim-9.0.tar.bz2
    dest: /tmp
    remote_src: no
  when: (vim_version.stdout | float) < 8.2

- name: 获取本地python config路径
  shell: "python3-config --configdir"
  register: python3_config_dir

- name: 安装vim 9.0
  shell: "cd vim90 && ./configure --with-features=huge --enable-multibyte --with-ruby-command=ruby   --enable-pythoninterp=yes --enable-gui=gtk2 --enable-cscope --enable-luainterp --with-lua-prefix=/usr/local --enable-fontset --enable-rubyinterp=dynamic --enable-python3interp=yes --with-python3-config-dir={{ python3_config_dir.stdout }} && make -j$(nproc) && make install"
  args:
    chdir: /tmp
  when: (vim_version.stdout | float) < 8.2

- name: -下载powerline字体-
  unarchive:
    src: fonts.tar.gz
    dest: /tmp
    remote_src: no

- name: -安装fronts字体文件-
  shell: sh install.sh
  args:
    chdir: /tmp/fonts

- name: -安装Nerd Fonts字体库-
  git:
    repo: 'https://github.com/ryanoasis/nerd-fonts.git'
    dest: /tmp/nerd-fonts
    version: master
    clone: yes
    depth: 1
    update: yes

- name: 安装nerd-fonts字体
  shell: "./install.sh"
  args:
    chdir: /tmp/nerd-fonts

- name: -安装vim 插件管理器-
  git:
    repo: 'https://github.com/VundleVim/Vundle.vim.git'
    dest: ~/.vim/bundle/Vundle.vim
    version: master
    clone: yes
    update: yes
- name: -安装vim_fugitive插件-
  git:
    repo: 'https://github.com/tpope/vim-fugitive.git'
    dest: ~/.vim/bundle/vim-fugitive
    version: master
    clone: yes
    update: yes
- name: -安装Molokai color scheme for vim-
  git:
    repo: 'https://github.com/tomasr/molokai.git'
    dest: ~/.vim/colors
    version: master
    clone: yes
- name: -字体主题插件拷贝-
  copy:
    src: ~/.vim/colors/colors/molokai.vim
    dest: ~/.vim/colors/molokai.vim

- name: -下载fuzzy finder-
  git:
    repo: 'https://github.com/junegunn/fzf.git'
    dest: ~/.fzf
    version: master
    clone: yes
- name: -安装fuzzy finder-
  shell: ./install --all
  args:
    chdir: ~/.fzf
    executable: /bin/bash
- name: -拷贝vimrc模板文件-
  template:
    src: "{{ item }}"
    dest: ~/.vimrc
    mode: u=rw,g=r,o=r
  loop: "{{ query('first_found', { 'files': myfiles, 'paths': mypaths}) }}"
  vars:
    myfiles:
      - "{{ ansible_distribution}}{{ansible_distribution_major_version }}_vimrc.j2"
      -  default_vimrc.j2
    mypaths: ['/etc/ansible/roles/vim/templates/']
- name: 初始化vimrc配置文件
  shell: vim +PluginInstall +qall

- block:
  - name: 安装go语言
    unarchive:
      src: https://dl.google.com/go/go{{ go_version }}.linux-amd64.tar.gz
      dest: /usr/local
      remote_src: yes

  - name: 初始化go环境
    lineinfile:
      path: /etc/profile
      line: 'PATH=$PATH:/usr/local/go/bin'
      create: yes
      state: present
  when: build_params.find('go') != -1

- name: 安装YouCompleteMe插件
  shell: "git submodule update --init --recursive && python3 install.py {{ build_params}} --force-sudo"
  args:
    chdir: ~/.vim/bundle/YouCompleteMe

- name: 拷贝YCM额外配置文件
  copy:
    src: global_extra_conf.py
    dest: ~/global_extra_conf.py
    mode: 0644
- name: 安装bash powerline 插件
  pip:
    name: powerline-status
    state: present
    extra_args: -i https://mirrors.aliyun.com/pypi/simple
    executable: pip3
- name: 初始化powerline
  blockinfile:
    path: /etc/profile
    block: |
      powerline-daemon -q
      POWERLINE_BASH_CONTINUATION=1
      POWERLINE_BASH_SELECT=1
      . /usr/local/lib/{{ powerline_python_version }}/site-packages/powerline/bindings/bash/powerline.sh
